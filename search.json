[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Wiki",
    "section": "",
    "text": "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?"
  },
  {
    "objectID": "content/content.html",
    "href": "content/content.html",
    "title": "Sample content",
    "section": "",
    "text": "At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.\nUsing biblatex you can display bibliography divided into sections, depending of citation type. Let’s cite! The Einstein’s journal paper (Einstein, 1905) and the Dirac’s book (Dirac, 1981) are physics related items.\n\ndemo(\"LinearSDE\", package = \"dynr\")\n\n\n\n    demo(LinearSDE)\n    ---- ~~~~~~~~~\n\n&gt; #------------------------------------------------------------------------------\n&gt; # Author: Michael D. Hunter\n&gt; # Date: 2016-05-24\n&gt; # Filename: LinearSDE.R\n&gt; # Purpose: An illustrative example of using dynr to fit\n&gt; #   a linear stochastic differential equation model\n&gt; #------------------------------------------------------------------------------\n&gt; \n&gt; #rm(list=ls(all=TRUE))\n&gt; \n&gt; #------------------------------------------------------------------------------\n&gt; # Load packages\n&gt; require(dynr)\n\n\nLoading required package: dynr\n\n\nLoading required package: ggplot2\n\n\n\n&gt; #------------------------------------------------------------------------------\n&gt; # Example 2\n&gt; # Damped linear oscillator example\n&gt; # There is measurement noise and there are unmeasured dynamic disturbances.\n&gt; # These disturbances are called dynamic noise.\n&gt; # There is a single indicator.\n&gt; # It is somewhat open to figure out what combination of variables can really be\n&gt; # estimated for this kind of model.  It is clear that measurement noise and\n&gt; # SOME dynamic noise can be estimated, but not all.\n&gt; \n&gt; \n&gt; #------------------------------------------------------------------------------\n&gt; # Define all the model components via the RECIPE functions\n&gt; \n&gt; # measurement\n&gt; # this is the factor loadings matrix, Lambda in SEM notation or C in OpenMx notation\n&gt; meas &lt;- prep.measurement(\n+   values.load=matrix(c(1, 0), 1, 2), # starting values and fixed values\n+   params.load=matrix(c('fixed', 'fixed'), 1, 2),\n+   state.names=c(\"Position\",\"Velocity\"),\n+   obs.names=c(\"y1\")) # parameter numbers or indication that parameter is fixed\n\n&gt; # Look\n&gt; meas\n $values.load\n[[1]]\n   Position Velocity\ny1        1        0\n\n\n $params.load\n[[1]]\n   Position Velocity\ny1 \"fixed\"  \"fixed\" \n\n\n $values.exo\nlist()\n\n $params.exo\nlist()\n\n $values.int\nlist()\n\n $params.int\nlist()\n\n $state.names\n[1] \"Position\" \"Velocity\"\n\n $obs.names\n[1] \"y1\"\n\n $exo.names\ncharacter(0)\n\n\n&gt; # no free parameters in the factor loadings\n&gt; \n&gt; \n&gt; # observation and dynamic noise components\n&gt; # the latent noise is the dynamic noise, Psi in SEM notation or Q in OpenMx notation\n&gt; # the observed noise is the measurement noise, Theta in SEM notation or R in OpenMx notation\n&gt; ecov &lt;- prep.noise(\n+   values.latent=diag(c(0, 1), 2), params.latent=diag(c('fixed', 'dnoise'), 2), # uses free parameter 3\n+   values.observed=diag(1.5, 1), params.observed=diag('mnoise', 1)) # uses free parameter 4\n\n&gt; # Look\n&gt; ecov\n $values.latent\n[[1]]\n     [,1] [,2]\n[1,]    0    0\n[2,]    0    1\n\n\n $params.latent\n[[1]]\n     [,1]    [,2]    \n[1,] \"fixed\" \"fixed\" \n[2,] \"fixed\" \"dnoise\"\n\n\n $values.observed\n[[1]]\n     [,1]\n[1,]  1.5\n\n\n $params.observed\n[[1]]\n     [,1]    \n[1,] \"mnoise\"\n\n\n $values.latent.inv.ldl\n[[1]]\n          [,1] [,2]\n[1,] -13.81551    0\n[2,]   0.00000    0\n\n\n $values.observed.inv.ldl\n[[1]]\n          [,1]\n[1,] 0.4054651\n\n\n\n&gt; # dynr takes steps to make sure covariance matrices are positive definite\n&gt; \n&gt; #ecov &lt;- prep.noise(\n&gt; # values.latent=rep(list(diag(c(0, 1), 2)), 2), params.latent=rep(list(diag(c('fixed', 'dnoise'), 2)), 2), # uses free parameter 3\n&gt; # values.observed=list(diag(0.5, 1), diag(1.5, 1)), params.observed=list(diag('mnoise1', 1), diag('mnoise2', 1))) # uses free parameter 4\n&gt; \n&gt; \n&gt; # initial covariances and latent state values\n&gt; # These initialize the recursive algorithm (extended Kalman filter) that dynr uses\n&gt; # These are x0 and P0 in OpenMx notation\n&gt; initial &lt;- prep.initial(\n+   values.inistate=c(0, 1),\n+   params.inistate=c('inipos', 'fixed'), #initial position is free parameter 5, initial slope is fixed at 1\n+   values.inicov=diag(1, 2),\n+   params.inicov=diag('fixed', 2)) #initial covariance is fixed to a diagonal matrix of 1s.\n\n&gt; #initial &lt;- prep.initial(\n&gt; # values.inistate=list(c(0, 1), c(0, 1)),\n&gt; # params.inistate=list(c('inipos', 'fixed'), c('fixed', 'inivel')), #initial position is free parameter 5, initial slope is fixed at 1\n&gt; # values.inicov=list(diag(1, 2), diag(1, 2)),\n&gt; # params.inicov=list(diag('fixed', 2), diag('fixed', 2))) #initial covariance is fixed to a diagonal matrix of 1s.\n&gt; \n&gt; \n&gt; # define the differential equation\n&gt; dynamics &lt;- prep.matrixDynamics(\n+   values.dyn=matrix(c(0, -0.1, 1, -0.2), 2, 2),\n+   params.dyn=matrix(c('fixed', 'spring', 'fixed', 'friction'), 2, 2), #uses parameters 1 and 2\n+   isContinuousTime=TRUE)\n\n&gt; # Data\n&gt; data(Oscillator)\n\n&gt; data &lt;- dynr.data(Oscillator, id=\"id\", time=\"times\", observed=\"y1\")\n\n&gt; # Prepare for cooking\n&gt; # put all the recipes together\n&gt; model &lt;- dynr.model(dynamics=dynamics, measurement=meas, noise=ecov, initial=initial, data=data, outfile=\"LinearSDE.c\")\n\n&gt; # set upper bounds, if you want\n&gt; model$ub &lt;- c(100, 100, 100, 100, 100)\n\n&gt; model$ub &lt;- c(friction=101, spring=100, inipos=103, 100, 100)\n\n&gt; model$ub['dnoise'] &lt;- 99\n\n&gt; printex(model,ParameterAs=model$param.names,show=FALSE,printInit=TRUE,\n+         outFile=\"LinearSDE.tex\")\n\n&gt; #tools::texi2pdf(\"LinearSDE.tex\")\n&gt; #system(paste(getOption(\"pdfviewer\"), \"LinearSDE.pdf\"))\n&gt; \n&gt; \n&gt; # Estimate free parameters\n&gt; res &lt;- dynr.cook(model, verbose = FALSE)\n[1] \"Get ready!!!!\"\nMay I present to you your error messages?\nusing C compiler: ‘gcc (Ubuntu 11.3.0-1ubuntu1~22.04.1) 11.3.0’\nOptimization function called.\nStarting Hessian calculation ...\nFinished Hessian calculation.\nOriginal exit flag:  3 \nModified exit flag:  3 \nOptimization terminated successfully: ftol_rel or ftol_abs was reached. \nOriginal fitted parameters:  -0.2507235 -0.6235575 0.4257371 0.4846102 \n0.1352342 \n\nTransformed fitted parameters:  -0.2507235 -0.6235575 1.530718 1.623542 \n0.1352342 \n\nDoing end processing\nSuccessful trial\nTotal Time: 3.242611 \nBackend Time: 2.513585 \n\n&gt; # Examine results\n&gt; summary(res)\nCoefficients:\n         Estimate Std. Error t value ci.lower ci.upper Pr(&gt;|t|)    \nspring   -0.25072    0.03249  -7.716 -0.31441 -0.18704   &lt;2e-16 ***\nfriction -0.62356    0.11623  -5.365 -0.85137 -0.39575   &lt;2e-16 ***\ndnoise    1.53072    0.44206   3.463  0.66429  2.39714   0.0003 ***\nmnoise    1.62354    0.10466  15.512  1.41841  1.82867   &lt;2e-16 ***\ninipos    0.13523    1.41982   0.095 -2.64756  2.91803   0.4621    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n-2 log-likelihood value at convergence = 4067.87\nAIC = 4077.87\nBIC = 4102.41\n\n&gt; plotFormula(model, res@transformed.parameters)\n\n\n\n\n\n\n&gt; #ggsave(\"LinearSDEPlotFml.pdf\")\n&gt; #------------------------------------------------------------------------------\n&gt; # some miscellaneous nice functions\n&gt; \n&gt; plot(res, dynrModel=model, textsize=6, style = 1)\n\n\n\n\n\n\n&gt; plot(res, dynrModel=model, textsize=6, style = 2)\n\n\n\n\n\n\n&gt; autoplot(res, model, numSubjDemo=1)\n\n\n\n\n\n\n&gt; # get the estimated parameters from a cooked model/data combo\n&gt; coef(res)\n    spring   friction     dnoise     mnoise     inipos \n-0.2507235 -0.6235575  1.5307183  1.6235420  0.1352342 \n\n&gt; # get the log likelihood, AIC, and BIC from a cooked model/data combo\n&gt; logLik(res)\n'log Lik.' -2033.937 (df=5)\n\n&gt; AIC(res)\n[1] 4077.875\n\n&gt; BIC(res)\n[1] 4102.414\n\n&gt; # compare true parameters to estimated ones\n&gt; trueParams &lt;- c(-.3, -.7, 2.2, 1.5, 0)\n\n&gt; data.frame(name=c('Spring', 'Damping', 'DynVar', 'MeasVar', 'IniPos'), true=trueParams, estim=coef(res))\n            name true      estim\nspring    Spring -0.3 -0.2507235\nfriction Damping -0.7 -0.6235575\ndnoise    DynVar  2.2  1.5307183\nmnoise   MeasVar  1.5  1.6235420\ninipos    IniPos  0.0  0.1352342\n\n&gt; (CI &lt;- confint(res))\n              2.5 %     97.5 %\nspring   -0.3144090 -0.1870380\nfriction -0.8513675 -0.3957474\ndnoise    0.6642948  2.3971418\nmnoise    1.4184091  1.8286749\ninipos   -2.6475642  2.9180326\n\n&gt; # Check that all true parameters are within the confidence intervals of the estimated params\n&gt; withinIntervals &lt;- CI[,1] &lt; trueParams & trueParams &lt; CI[,2]\n\n&gt; withinIntervals\n  spring friction   dnoise   mnoise   inipos \n    TRUE     TRUE     TRUE     TRUE     TRUE \n\n&gt; # all should be true\n&gt; \n&gt; # compare estimated smoothed latent states to true\n&gt; # simulated ones\n&gt; sm &lt;- data.frame(t(res@eta_smooth_final))\n\n&gt; cor(sm, Oscillator[,c('x1', 'x2')])\n           x1         x2\nX1 0.94333283 0.01440661\nX2 0.03430961 0.69468620\n\n&gt; #------------------------------------------------------------------------------\n&gt; # End\n&gt; #save(model,res,file=\"LinearSDE.RData\")\n\n\n\n\n\n\nDirac, P. A. M. (1981). The principles of quantum mechanics. Clarendon Press.\n\n\nEinstein, A. (1905). Zur Elektrodynamik bewegter Körper. (German) [On the electrodynamics of moving bodies]. Annalen Der Physik, 322(10), 891–921. https://doi.org/http://dx.doi.org/10.1002/andp.19053221004"
  },
  {
    "objectID": "content/references.html",
    "href": "content/references.html",
    "title": "References",
    "section": "",
    "text": "Dirac, P. A. M. (1981). The principles of quantum mechanics.\nClarendon Press.\n\n\nEinstein, A. (1905). Zur Elektrodynamik bewegter\nKörper. (German)\n[On the electrodynamics of moving bodies]. Annalen Der\nPhysik, 322(10), 891–921. https://doi.org/http://dx.doi.org/10.1002/andp.19053221004"
  }
]